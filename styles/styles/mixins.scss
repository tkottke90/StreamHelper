@use 'sass:meta';
@use "sass:map";

@mixin hide {
  transform: scale(0);
  opacity: 0;
  max-height: 0;
}

@mixin overlay {
  position: absolute;
  width: 100vw;
  height: 100vh;

  :global .overlay {
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
  }
}

@mixin actionContainer {
  display: flex;
  justify-content: flex-end;

  margin-top: 1rem;
}

@mixin fullScreen {
  position: absolute;
  
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
}

@mixin button($themes) {
  $font-size: 1.5rem;
  $padding: 0.6rem;

  display: flex;
  justify-content: space-between;
  gap: calc($padding/2);
  border-radius: 8px;
  border: 1px solid transparent;
  padding: $padding calc($padding * 2);
  font-size: 1rem;
  font-weight: bold;
  font-family: inherit;
  cursor: pointer;

  stroke-width: 2px;

  .iconify {
    width: $font-size;
    height: $font-size;
    line-height: $font-size;
  }

  &:hover {
    @apply bg-slate-300;
    --tw-bg-opacity: 0.25;
    stroke-width: 2px;
  }

  &:active {
    @apply bg-slate-300;
    --tw-bg-opacity: 0.5;
  }

  @each $name, $style in $themes {
    // @debug "== Button Style ==";
    // @debug "Style Name: #{$name}";
    // @debug "Style Type: #{type-of($style)}";

    @if meta.type-of($style) != "map" {
      @error "Invalid Style Map for theme #{$name}";
    }

    @if not map.has-key($style, "color") {
      @error "Missing Color (color) key in style map #{$name}";
    }

    $styleBg: map.get($style, "color");
    $styleBgDark: map.get($style, "color");

    @if map.has-key($style, "darkColor") {
      $styleBgDark: map.get($style, "darkColor")
    }

    @if not map.has-key($style, "font") {
      @error "Missing Background (bg) key in style map #{$name}";
    }
 
    $styleColor: map.get($style, "font");
    $styleDarkColor: map.get($style, "font");
    
    @if map.has-key($style, "darkFont") {
      $styleDarkColor: map.get($style, "darkFont")
    }

    &.btn-#{$name} {

      @apply text-#{$styleBg} fill-#{$styleBg} dark:text-#{$styleDarkColor};

      &:hover {
        @apply bg-#{$styleBg};
        --tw-bg-opacity: 0.25;
      }

      &:active {
        @apply bg-#{$styleBg} dark:bg-#{$styleBgDark} text-#{$styleColor} fill-#{$styleColor};
        --tw-bg-opacity: 0.75;
      }
    }

    &.btn-#{$name}--raised {
      @apply bg-#{$styleBg} dark:bg-#{$styleBgDark} text-#{$styleColor} fill-#{$styleColor} shadow-lg;

      &:hover {
        --tw-bg-opacity: 0.9;
      }

      &:active {
        @apply shadow-none;
        --tw-bg-opacity: 0.75;
      }
    }

    &.btn-#{$name}--outline {
      @apply border-#{$styleBg} text-#{$styleBg} fill-#{$styleBg};

      &:hover {
        @apply bg-#{$styleBg};
        --tw-bg-opacity: 0.25;
      }

      &:active {
        @apply bg-#{$styleBg} text-#{$styleColor} fill-#{$styleColor}
      }
    }
  }
}

// == Source: https://css-tricks.com/snippets/sass/material-shadows-mixin/ ==

@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);  
  }
}

@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

// ==========================================================================
